import re
"Ref: https://www.biostars.org/p/9491956/"

def cdhit_parser(clstr_file, output_file='cdhit_parsed.csv'):
    """
    Parses the output file generated by CD-HIT and writes the parsed data to a CSV file.

    Parameters:
    clstr_file (str): The path to the CD-HIT output file.
    output_file (str): The path to the output CSV file. Default is 'cdhit_parsed.csv'.

    Returns:
    dict: A dictionary containing the parsed data, where the keys are cluster numbers and the values are dictionaries
        containing information about each cluster.
    """
    # Initialize parsed csv file
    csv_file = open(output_file, 'w')
    csv_file.write('cluster_no,rep_member,rep_member_length,member_ID,member_length,member_similarity,n_members\n')
    # Read the cdhit output file
    with open(clstr_file, 'r') as f:
        lines = f.readlines()

    repet_UniProtID = [] # to check if there are repeated UniProt IDs
    clstr = dict()
    line_idx = 0
    while line_idx < len(lines):
        # check if >Cluster lines are there
        ff = re.search(r'^(>Cluster.*)', lines[line_idx])
        if ff != None:
            line_idx += 1

            # firstcol = FF.group().replace('>',''), take the number only
            cluster_no = ff.group().replace('>', '').split(' ')[1]
            if cluster_no not in clstr:
                clstr[cluster_no] = dict()

            next_line = lines[line_idx]
            next_line = next_line.split('|')
            rep_member = next_line[1]
            rep_member_length = next_line[0].split('\t')
            rep_member_length = rep_member_length[1].split(',')[0].replace('aa', '')
            clstr[cluster_no]['representative_member'] = rep_member
            clstr[cluster_no]['representative_member_length'] = rep_member_length
            csv_file.write(cluster_no + ',' + rep_member + ',' + rep_member_length + ',')

            clstr[cluster_no]['member_ID'] = [rep_member]
            clstr[cluster_no]['member_length'] = [rep_member_length]
            clstr[cluster_no]['member_similarity'] = ['100']
            clstr[cluster_no]['n_members'] = 1

            # Extract cluster members
            while True:
                line_idx += 1
                if line_idx >= len(lines):
                    break
                # check if startswith number, except 0
                if re.search(r'^([1-9]\d*)', lines[line_idx]) != None:
                    next_line = lines[line_idx]
                    next_line = next_line.split('|')
                    member_ID = next_line[1]
                    member_length = next_line[0].split('\t')
                    member_length = member_length[1].split(',')[0].replace('aa', '')
                    similarity = next_line[2].split('/')[2]
                    similarity = similarity.split('%')[0]

                    if member_ID in clstr[cluster_no]['member_ID']:
                        repet_UniProtID.append(member_ID)
                    else:
                        clstr[cluster_no]['member_ID'].append(member_ID)
                        clstr[cluster_no]['member_length'].append(member_length)
                        clstr[cluster_no]['member_similarity'].append(similarity)
                        clstr[cluster_no]['n_members'] += 1
                else:
                    line_idx -= 1
                    break

            member_ID = ','.join(clstr[cluster_no]['member_ID'])
            member_length = ','.join(clstr[cluster_no]['member_length'])
            member_similarity = ','.join(clstr[cluster_no]['member_similarity'])
            n_members = str(clstr[cluster_no]['n_members'])
            csv_file.write(f'"{member_ID}","{member_length}","{member_similarity}",{n_members}\n')
        line_idx += 1
    csv_file.close()
    return clstr

clstr_file = 'c30_uniprot_output.fasta.clstr'
clstr = cdhit_parser(clstr_file, output_file='cdhit_parsed.csv')

import pandas as pd
df = pd.read_csv('cdhit_parsed.csv')
df = df.sort_values(by=['n_members'], ascending=False)
df, clstr